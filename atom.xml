<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>М80メ&#39;s life</title>
  
  <subtitle>顺兮 逆兮 无阻我飞翔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skyz319.github.io/"/>
  <updated>2019-08-08T08:14:13.765Z</updated>
  <id>http://skyz319.github.io/</id>
  
  <author>
    <name>М80メ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter系列:2.第一个Flutter应用</title>
    <link href="http://skyz319.github.io/2019/07/31/Flutter%E7%B3%BB%E5%88%97-2-%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/"/>
    <id>http://skyz319.github.io/2019/07/31/Flutter系列-2-第一个Flutter应用/</id>
    <published>2019-07-31T07:47:48.000Z</published>
    <updated>2019-08-08T08:14:13.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter起飞系列之第一个Flutter应用"><a href="#Flutter起飞系列之第一个Flutter应用" class="headerlink" title="Flutter起飞系列之第一个Flutter应用"></a>Flutter起飞系列之第一个Flutter应用</h1><p><strong>基于Mac下的VS Code </strong></p><h2 id="Dart-语言"><a href="#Dart-语言" class="headerlink" title="Dart 语言"></a>Dart 语言</h2><blockquote><p>Dart 是一种 易于学习、 易于扩展、并且可以部署到 任何地方 的 应用 编程 语言。Google 使用 Dart 来开发 大型应用。</p></blockquote><p>Dart 语言在2011年10月由 Google 发布的一种结构化的Web开发语言，既让人感觉熟悉，又足够灵活。既适用于快速原型开发，又适用于组织大型的代码库。既可以用在桌面版和移动版的浏览器中，也可以在服务器端使用。</p><ul><li>Dart 中的所有东西都是对象，包括数字、函数等，它们都继承自 Object，并且对象的默认值都是 null（包括数字）。</li><li>Dart是强类型语言，但变量类型是可选的因为Dart可以自动推断变量类型。</li><li>跟某些语言不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的。</li><li>Dart 中的语句以分号结束，并且不是选的。</li><li>Dart 的类型是可选的。Dart 语言本质上是动态类型语言，可以使用 var 声明变量，一个变量也可以被赋予不同类型的对象。但大多数情况，我们不会去改变一个变量的类型。在 Dart 中也可以使用类型来声明变量，就像在静态语言中做的那样。</li><li>Dart 支持顶层的变量和函数，就像 JavaScript 一样，它并不要求你像 Java 那样把所有的东西都放到类中。</li><li>Dart 在运行之前会先解析你的代码。你可以通过使用 类型或者编译时常量来帮助 Dart 去捕获异常以及 让代码运行的更高效。</li></ul><h3 id="Dart的代码风格推荐"><a href="#Dart的代码风格推荐" class="headerlink" title="Dart的代码风格推荐"></a>Dart的代码风格推荐</h3><p><a href="http://dart.goodev.org/guides/language/effective-dart/design#type-annotations" target="_blank" rel="noopener">代码风格推荐</a></p><h3 id="Variables-变量"><a href="#Variables-变量" class="headerlink" title="Variables(变量)"></a>Variables(变量)</h3><p>Dart中，所有东西都是对象，包括数字、函数等。它们都继承自Object。</p><h4 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h4><p>在Dart中，未进行初始化的变量会自动获取一个<code>null</code>值。</p><h4 id="var变量"><a href="#var变量" class="headerlink" title="var变量"></a>var变量</h4><p>Dart中变量通过<code>var</code>进行定义。它可接收任意类型，但<strong>请注意</strong>，Dart中的var变量一旦赋值，类型便会确定，<strong>不能再进行更改</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  x变量引用了一个内容为hello~的String对象。</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="symbol">'hello</span>~`;</span><br><span class="line"><span class="comment">//  出错！变量类型不能更改</span></span><br><span class="line">x = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><h4 id="Optional-types-可选类型"><a href="#Optional-types-可选类型" class="headerlink" title="Optional types - 可选类型"></a>Optional types - 可选类型</h4><p>在声明变量时，可加上具体的类型。添加类型可以更加清晰表达你的意图，且IDE也可 以使用该类型来更好的帮助你。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">name</span> = <span class="string">'Jack'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="dynamic和Object"><a href="#dynamic和Object" class="headerlink" title="dynamic和Object"></a>dynamic和Object</h4><ul><li><code>Object</code>是Dart所有对象的基类。所有类型的数据都可以赋值给<code>Object</code>声明的对象。</li><li><code>dynamic</code>与<code>var</code>一样都是关键词，声明的变量可以赋值任意对象。<h5 id="dynamic和Object的异同"><a href="#dynamic和Object的异同" class="headerlink" title="dynamic和Object的异同"></a>dynamic和Object的异同</h5><code>dynamic</code>与<code>Object</code>的相同处在于：它们声明的变量都可以在后期改变赋值类型。<br>但<code>Object</code>声明的对象只能使用<code>Object</code>的属性与方法，而<code>dynamic</code>声明的对象编译器会提供所有可能的组合。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> x;</span><br><span class="line"><span class="built_in">Object</span> y;</span><br><span class="line">main() &#123;</span><br><span class="line">    x = <span class="string">''</span>;</span><br><span class="line">    y = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">//  正常</span></span><br><span class="line">    <span class="built_in">print</span>(x.length);</span><br><span class="line">    <span class="comment">//  Object的属性及方法没有length。报错</span></span><br><span class="line">    <span class="built_in">print</span>(y.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Final-and-const"><a href="#Final-and-const" class="headerlink" title="Final and const"></a>Final and const</h4><p>如果你以后不打算修改一个变量，使用 <code>final</code> 或者<code>const</code>。</p><p> 一个final 变量只能赋值一次；一个const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在第一次使用的时候初始化。</p><p><code>const</code> 变量为编译时常量。 如果 const 变量在类中，请定义为 <code>static const</code>。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。<br><code>const</code> 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//可以省略<span class="keyword">String这个类型声明</span></span><br><span class="line"><span class="keyword">final </span><span class="keyword">str </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br><span class="line">//final <span class="keyword">String </span><span class="keyword">str </span>= <span class="string">"hi world"</span><span class="comment">; </span></span><br><span class="line"><span class="symbol">const</span> <span class="keyword">str1 </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br><span class="line">//const <span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h4 id="Built-in-types-内置的类型"><a href="#Built-in-types-内置的类型" class="headerlink" title="Built-in types(内置的类型)"></a>Built-in types(内置的类型)</h4><p>Dart内置支持以下类型：</p><ul><li><code>numbers</code>：<code>int</code>与<code>double</code>;<br>-<code>strings</code>: UTF-16 编码的字符序列。 可以使用单引号或者双引号来创建字符串;</li><li><code>booleans</code>:Dart 有一个名字为<code>bool</code> 的类型。 只有两个对象是布尔类型的：<code>true</code>和<code>false</code> 所创建的对象， 这两个对象也都是编译时常量。</li><li><code>lists</code> (也被称之为 arrays或有序集合)</li><li><code>maps</code>：Map是一个键值对相关的对象。键和值可以是任何类型的对象，每个<strong>键</strong>只出现一个。</li><li><code>runes</code> (用于在字符串中表示 Unicode 字符)：在 Dart 中，runes 代表字符串的 UTF-32 code points。</li><li><code>symbols</code>：一个 Symbol object 代表 Dart 程序中声明的操作符或者标识符。使用 Symbol 字面量来获取标识符的 symbol 对象，也就是在标识符 前面添加一个 # 符号;</li></ul><p>可以在字符串中使用表达式，用法是这样的： <code>${expression}</code>。如果表达式是一个比赛服，可以省略 {}。 如果表达式的结果为一个对象，则 Dart 会调用对象的 `toString() 函数来获取一个字符串。</p><h3 id="Functions（方法）"><a href="#Functions（方法）" class="headerlink" title="Functions（方法）"></a>Functions（方法）</h3><p>Dart 是一个真正的面向对象语言，方法也是对象并且具有一种 类型，<code>Function</code>。 这意味着，方法可以赋值给变量，也可以当做其他方法的参数。 也可以把 Dart 类的实例当做方法来调用。 </p><h2 id="创建Flutter应用"><a href="#创建Flutter应用" class="headerlink" title="创建Flutter应用"></a>创建Flutter应用</h2><ol><li>VS Code中，使用快捷键<code>command + shift + p</code>呼出<strong>命令面板</strong>，键入<code>&gt;Flutter:new Project</code>(可忽略大小写或在下方选择）。</li><li>输入应用名称并回车</li><li>选择项目文件夹后选择右下<code>Select a folder to create the project in</code>按钮或直接回车。</li><li>新建文件夹会自动进行检查依赖，请等待其完成。</li><li>点击VS Code左侧调试图标，在顶部调试菜单点<strong>齿轮按钮(配置或修复launch.json)</strong>后会自动生成相应配置。</li><li>在启动调试时，会进行模拟器选择。前提是安装好XCode或Android SVD。可使用<code>flutter devices</code>识别并查看连接的移动设备。</li></ol><p>至此项目新建完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Flutter起飞系列之第一个Flutter应用&quot;&gt;&lt;a href=&quot;#Flutter起飞系列之第一个Flutter应用&quot; class=&quot;headerlink&quot; title=&quot;Flutter起飞系列之第一个Flutter应用&quot;&gt;&lt;/a&gt;Flutter起飞系列之第一
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://skyz319.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter系列:1.安装配置</title>
    <link href="http://skyz319.github.io/2019/07/31/Flutter%E7%B3%BB%E5%88%97-1-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://skyz319.github.io/2019/07/31/Flutter系列-1-安装配置/</id>
    <published>2019-07-31T07:46:35.000Z</published>
    <updated>2019-07-31T09:00:53.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Flutter"><a href="#什么是Flutter" class="headerlink" title="什么是Flutter"></a>什么是Flutter</h1><a id="more"></a><p>Flutter是Google发布的一个用于创建跨平台、高性能移动应用的框架。</p><ul><li>2017 年 Google I/O 大会上，Google 首次推出了一款新的用于创建跨平台、高性能的移动应用框架——Flutter。</li><li>2018年2月，Flutter发布了第一个Beta版本，同年五月， 在2018年Google I/O 大会上，Flutter 更新到了 beta 3 版本。</li><li>2018年6月，Flutter发布了首个预览版本，这意味着 Flutter 进入了正式版（1.0）发布前的最后阶段。</li></ul><h1 id="Flutter的安装与配置"><a href="#Flutter的安装与配置" class="headerlink" title="Flutter的安装与配置"></a>Flutter的安装与配置</h1><p><strong>仅针对Mac端</strong></p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><p>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></p><h3 id="Xcode-Android-Studio"><a href="#Xcode-Android-Studio" class="headerlink" title="Xcode/Android Studio"></a>Xcode/Android Studio</h3><p>若进行iOS/Android平台开发，则需要下载并设置相应IDE。此步略</p><h2 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h2><h3 id="获取Flutter"><a href="#获取Flutter" class="headerlink" title="获取Flutter"></a>获取Flutter</h3><ol><li>官网下载最新可用的安装包。<a href="https://flutter.io/sdk-archive/#macos" target="_blank" rel="noopener">官网地址</a></li><li>解压安装包到安装目录。</li><li>添加Flutter到path中。<code>export PATH=&quot;/Users/用户名/flutter/bin:$PATH&quot;</code></li><li>运行<code>flutter doctor -v</code>命令。该命令检查并指出未安装/缺失/存在问题的组件等，根据命令指示进行安装。安装完成后再次执行进行检查。直到提示<code>No issues found!</code>。<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[✓] Flutter (Channel dev, <span class="built_in">v1</span>.<span class="number">8</span>.<span class="number">2</span>, on Mac OS X <span class="number">10</span>.<span class="number">14</span>.<span class="number">5</span> <span class="number">18</span>F132, locale zh-Hans-<span class="meta">CN</span>)</span><br><span class="line">    • Flutter version <span class="number">1</span>.<span class="number">8</span>.<span class="number">2</span> at /Users/用户名/flutter</span><br><span class="line">    • Framework <span class="keyword">revision </span><span class="number">0</span>a39d8d92e (<span class="number">3</span> weeks ago), <span class="number">2019</span>-<span class="number">07</span>-<span class="number">10</span> <span class="number">19</span>:<span class="number">17</span>:<span class="number">14</span> -<span class="number">0700</span></span><br><span class="line">    • Engine <span class="keyword">revision </span><span class="number">75387</span>dbc14</span><br><span class="line">    • Dart version <span class="number">2</span>.<span class="number">5</span>.<span class="number">0</span> (<span class="keyword">build </span><span class="number">2</span>.<span class="number">5</span>.<span class="number">0</span>-dev.<span class="number">0</span>.<span class="number">0</span> <span class="keyword">b5aeaa6796)</span></span><br><span class="line"><span class="keyword">[✓] </span><span class="keyword">Android </span>toolchain - develop for <span class="keyword">Android </span>devices (<span class="keyword">Android </span>SDK version <span class="number">29</span>.<span class="number">0</span>.<span class="number">0</span>)</span><br><span class="line">    • <span class="keyword">Android </span>SDK at /Users/用户名/<span class="keyword">Android/sdk</span></span><br><span class="line"><span class="keyword"> </span>   • <span class="keyword">Android </span>NDK location not configured (optional<span class="comment">; useful for native profiling</span></span><br><span class="line">      support)</span><br><span class="line">    • Platform <span class="keyword">android-29, </span><span class="keyword">build-tools </span><span class="number">29</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    • Java <span class="keyword">binary </span>at: /Applications/<span class="keyword">Android</span></span><br><span class="line"><span class="keyword"> </span>     Studio.app/Contents/jre/jdk/Contents/Home/<span class="keyword">bin/java</span></span><br><span class="line"><span class="keyword"> </span>   • Java version OpenJDK Runtime Environment (<span class="keyword">build</span></span><br><span class="line"><span class="keyword"> </span>     <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_152-release-<span class="number">1136</span>-<span class="keyword">b06)</span></span><br><span class="line"><span class="keyword"> </span>   • All <span class="keyword">Android </span>licenses accepted.</span><br><span class="line">[✓] Xcode - develop for iOS <span class="keyword">and </span>macOS (Xcode <span class="number">10</span>.<span class="number">2</span>.<span class="number">1</span>)</span><br><span class="line">    • Xcode at /Applications/Xcode.app/Contents/Developer</span><br><span class="line">    • Xcode <span class="number">10</span>.<span class="number">2</span>.<span class="number">1</span>, <span class="keyword">Build </span>version <span class="number">10</span>E1001</span><br><span class="line">    • CocoaPods version <span class="number">1</span>.<span class="number">7</span>.<span class="number">4</span></span><br><span class="line">[✓] iOS tools - develop for iOS devices</span><br><span class="line">    • ios-deploy <span class="number">1</span>.<span class="number">9</span>.<span class="number">4</span></span><br><span class="line">[✓] <span class="keyword">Android </span>Studio (version <span class="number">3</span>.<span class="number">2</span>)</span><br><span class="line">    • <span class="keyword">Android </span>Studio at /Applications/<span class="keyword">Android </span>Studio.app/Contents</span><br><span class="line">    • Flutter plugin version <span class="number">31</span>.<span class="number">3</span>.<span class="number">1</span></span><br><span class="line">    • Dart plugin version <span class="number">181</span>.<span class="number">5656</span></span><br><span class="line">    • Java version OpenJDK Runtime Environment (<span class="keyword">build</span></span><br><span class="line"><span class="keyword"> </span>     <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_152-release-<span class="number">1136</span>-<span class="keyword">b06)</span></span><br><span class="line"><span class="keyword">[✓] </span>VS <span class="meta">Code</span> (version <span class="number">1</span>.<span class="number">36</span>.<span class="number">1</span>)</span><br><span class="line">    • VS <span class="meta">Code</span> at /Applications/Visual Studio <span class="meta">Code</span>.app/Contents</span><br><span class="line">    • Flutter extension version <span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span></span><br><span class="line">[✓] Connected device (<span class="number">1</span> available)</span><br><span class="line">    • iPhone Xʀ • <span class="number">5</span>D464A22-E49C-<span class="number">418</span>F-A4D1-<span class="number">769</span>D5BF8257F • ios •</span><br><span class="line">      com.apple.CoreSimulator.SimRuntime.iOS-<span class="number">12</span>-<span class="number">2</span> (simulator)</span><br><span class="line">• No issues found!</span><br></pre></td></tr></table></figure></li></ol><h3 id="升级Flutter-SDK及依赖包"><a href="#升级Flutter-SDK及依赖包" class="headerlink" title="升级Flutter SDK及依赖包"></a>升级Flutter SDK及依赖包</h3><ul><li><code>flutter upgrade</code>：升级SDK及flutter项目的依赖包。</li><li><code>flutter packages get</code>: 获取项目所有的依赖包。</li><li><code>flutter packages upgrade</code>: 获取项目所有依赖包的最新版本。</li></ul><h2 id="IDE的配置"><a href="#IDE的配置" class="headerlink" title="IDE的配置"></a>IDE的配置</h2><h3 id="Android-Studio-IntelliJ-IDEA"><a href="#Android-Studio-IntelliJ-IDEA" class="headerlink" title="Android Studio/IntelliJ IDEA"></a>Android Studio/IntelliJ IDEA</h3><p>Android Studio是基于IntelliJ IDea制作开发的，所以操作大同小异。</p><h4 id="安装Flutter与Dart插件"><a href="#安装Flutter与Dart插件" class="headerlink" title="安装Flutter与Dart插件"></a>安装Flutter与Dart插件</h4><p>Flutter用到两个插件：</p><ul><li><code>Flutter插件</code>: 支持Flutter开发（运行、测试、热重载等）。</li><li><code>Dart插件</code>: 提供代码支持（代码输入时验证、补全等）。<br>安装步骤：</li><li>打开IDE并打开插件首选项(Preferences &gt; Plugins)</li><li>选择Browse repositories…，搜索flutter插件并进行安装。安装后会提示安装Dart插件。</li></ul><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>VSCode也需要安装<code>Dart</code>及<code>Flutter</code>插件。<br>安装完成后，使用快捷键<code>command + shift + p</code>后键入<code>flutter new Project</code>测试是否安装成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Flutter&quot;&gt;&lt;a href=&quot;#什么是Flutter&quot; class=&quot;headerlink&quot; title=&quot;什么是Flutter&quot;&gt;&lt;/a&gt;什么是Flutter&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://skyz319.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>随笔(5)</title>
    <link href="http://skyz319.github.io/2019/01/07/%E9%9A%8F%E7%AC%94-5/"/>
    <id>http://skyz319.github.io/2019/01/07/随笔-5/</id>
    <published>2019-01-07T01:34:02.000Z</published>
    <updated>2019-01-07T01:34:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(4)</title>
    <link href="http://skyz319.github.io/2019/01/04/%E9%9A%8F%E7%AC%94-4/"/>
    <id>http://skyz319.github.io/2019/01/04/随笔-4/</id>
    <published>2019-01-04T00:54:21.000Z</published>
    <updated>2019-01-04T00:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(3)</title>
    <link href="http://skyz319.github.io/2018/12/29/%E9%9A%8F%E7%AC%94-3/"/>
    <id>http://skyz319.github.io/2018/12/29/随笔-3/</id>
    <published>2018-12-29T00:40:39.000Z</published>
    <updated>2018-12-29T00:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(2)</title>
    <link href="http://skyz319.github.io/2018/12/28/%E9%9A%8F%E7%AC%94-2/"/>
    <id>http://skyz319.github.io/2018/12/28/随笔-2/</id>
    <published>2018-12-28T00:43:59.000Z</published>
    <updated>2018-12-28T00:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(1)</title>
    <link href="http://skyz319.github.io/2018/12/27/%E9%9A%8F%E7%AC%94-1/"/>
    <id>http://skyz319.github.io/2018/12/27/随笔-1/</id>
    <published>2018-12-27T01:12:19.000Z</published>
    <updated>2018-12-28T00:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Go-Ethereum源码解析</title>
    <link href="http://skyz319.github.io/2018/12/26/go-ethereum%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://skyz319.github.io/2018/12/26/go-ethereum源码解析/</id>
    <published>2018-12-26T01:25:39.000Z</published>
    <updated>2018-12-28T00:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-ethereum源码解析"><a href="#go-ethereum源码解析" class="headerlink" title="go-ethereum源码解析"></a>go-ethereum源码解析</h1><a id="more"></a><h2 id="搭建go-ethereum环境"><a href="#搭建go-ethereum环境" class="headerlink" title="搭建go ethereum环境"></a>搭建go ethereum环境</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Mac OS 10.13.6<br><strong>虚拟机</strong>：CentOS Linux release 7.5.1804<br>虚拟机与物理机已进行目录共享。<br>Visual Studio Code</p><h3 id="克隆源码-amp-安装Geth"><a href="#克隆源码-amp-安装Geth" class="headerlink" title="克隆源码&amp;安装Geth"></a>克隆源码&amp;安装Geth</h3><ol><li><p>在合适的目录下克隆go-ethereum代码.</p><p> <code>git clone https://github.com/ethereum/go-ethereum.git</code></p></li><li><p>编译. </p><p> <code></code>  cd go-ethereum </p><pre><code>make geth``</code></pre></li><li><p>将Geth移动至<code>/usr/local/bin</code><br> <code>cp /root/tmp/go-etereum/build/bin/geth /usr/local/bin</code></p></li></ol><h2 id="以太坊的核心概念"><a href="#以太坊的核心概念" class="headerlink" title="以太坊的核心概念"></a>以太坊的核心概念</h2><ul><li>EVM:以太坊虚拟机，是以太坊中智能合约的运行环境，不仅是沙箱，实际上是完全隔离的，使EVM内部运行的代码无法访问网络、文件系统或其它进程。</li><li>Account: 账户，分为合约账户及外部账户。合约账号主要存储执行的合约代码，外部账号存储以太币，对应具体公钥。</li><li>Transaction:以太网络上的交易，从一个账户到另一个账户的消息，包括以太币或智能合约的参数。</li><li>Gas: 以太网络运行时的花销(燃料)，每执行一条智能合约，都会消耗一定燃料，以保证网络避免受到无聊或恶意的计算任务。</li><li>Mine: 挖矿，以太通过工作量证明算法来保证网络的安全运行。挖矿的任务是解决复杂的数学问题，以便成功“挖掘”一个区块。这被称为“工作证明”。工作证明具有ASIC抗性。</li><li>P2P网络： 以太坊分布是分布式，没有中心服务器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;go-ethereum源码解析&quot;&gt;&lt;a href=&quot;#go-ethereum源码解析&quot; class=&quot;headerlink&quot; title=&quot;go-ethereum源码解析&quot;&gt;&lt;/a&gt;go-ethereum源码解析&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://skyz319.github.io/tags/Go/"/>
    
      <category term="区块链" scheme="http://skyz319.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>重头再来 只为更好的自己</title>
    <link href="http://skyz319.github.io/2016/12/29/%E9%87%8D%E5%A4%B4%E5%86%8D%E6%9D%A5-%E5%8F%AA%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://skyz319.github.io/2016/12/29/重头再来-只为更好的自己/</id>
    <published>2016-12-29T07:19:00.000Z</published>
    <updated>2016-12-29T07:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg" alt=""></p><p>将博客的内容清除了个干净,放空一下自己.</p><p><strong>2017,一定会要做更棒的自己!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将博客的内容清除了个干净,放空一下自己.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2017,一定会要做更棒的自己!&lt;/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读&lt;你的命运不是一头骡子&gt;有感</title>
    <link href="http://skyz319.github.io/2016/07/19/%E8%AF%BB%E3%80%8A%E4%BD%A0%E7%9A%84%E5%91%BD%E8%BF%90%E4%B8%8D%E6%98%AF%E4%B8%80%E5%A4%B4%E9%AA%A1%E5%AD%90%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://skyz319.github.io/2016/07/19/读《你的命运不是一头骡子》有感/</id>
    <published>2016-07-19T01:07:34.000Z</published>
    <updated>2018-08-23T06:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了阮一峰老师的博客《<a href="http://www.ruanyifeng.com/blog/2016/06/your-destiny-is-not-like-a-mule.html" target="_blank" rel="noopener">你的命运不是一头骡子</a>》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….</p><a id="more"></a><p>以下是原文:</p><blockquote><p>《黑客与画家》的作者保罗•格雷厄姆，做过一个非常好的概括。</p><blockquote><p>“……（你）只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，其实与一个挖水沟的工人是一样的，从这头挖到那头，仅此而已，从事的都是机械性的工作。”</p></blockquote><p>我不是说这样的流程有什么不对，而是说在这个流程里，人只是充当一种工具。就像骡子只是铁管上山的一种手段，你只是产出代码的一种手段，本身并没有”自由意志”体现在里面。或者说，你身上体现的都是他人的（或资本的）意志，你无法表现出自我。评价骡子的标准是，铁管背得比较多、比较快，评价软件工程师的标准又何尝不是如此呢，都是看是否忠实有效地实现那些外部意志。<br>我见过许多年轻的程序员勤奋工作，从早到晚一刻不停地编码，周末也来加班，努力完成公司的一个个目标，从来不问、甚至不想”这种需求对不对”、”这个功能有没有必要”，更不要说想一想”我的人生规划是什么”。中国的现实也很残酷，公司的哲学就是告诉你做什么，你就做什么，不想做就离开。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到了阮一峰老师的博客《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/06/your-destiny-is-not-like-a-mule.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你的命运不是一头骡子&lt;/a&gt;》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….&lt;/p&gt;
    
    </summary>
    
      <category term="感想" scheme="http://skyz319.github.io/categories/%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="感想" scheme="http://skyz319.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
</feed>
