<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>М80メ&#39;s life</title>
  
  <subtitle>顺兮 逆兮 无阻我飞翔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skyz319.github.io/"/>
  <updated>2019-08-13T05:33:25.000Z</updated>
  <id>http://skyz319.github.io/</id>
  
  <author>
    <name>М80メ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2. Flutter之路-布局</title>
    <link href="http://skyz319.github.io/2019/08/09/2-Flutter%E4%B9%8B%E8%B7%AF-%E5%B8%83%E5%B1%80/"/>
    <id>http://skyz319.github.io/2019/08/09/2-Flutter之路-布局/</id>
    <published>2019-08-09T07:16:53.000Z</published>
    <updated>2019-08-13T05:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Flutter之路-布局"><a href="#2-Flutter之路-布局" class="headerlink" title="2. Flutter之路-布局"></a>2. Flutter之路-布局</h1><a id="more"></a><p>Flutter布局机制的核心就是widget。在Flutter中，几乎所有东西都是一个widget。甚至布局模型都是widget。在Flutter应用中看到的图像、图标和文本都是widget。 甚至你看不到的东西也是widget，例如行（row）、列（column）以及用来排列、约束和对齐这些可见widget的网格（grid）。</p><h2 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h2><p>在Flutter中，我们平时自定义的widget，一般都是继承自<code>StatelessWidget</code>或<code>StatefulWidget</code>（并不是只有这两种），这两种widget也是目前最常用的两种。</p><ul><li>StatelessWidget：一般来说，继承此类的widget自身状态不会去改变，创建了就直接显示，不会有色值、大小或者其他属性的变化。</li><li>StatefulWidget：widget需要动态的去改变或者相应一些状态，例如点击态、色值、内容区域等,就需要继承此类。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p><code>Container</code>在Flutter中极其常用，官方定义是<code>Container</code>是一个拥有绘制、定位、调整大小的 widget。它是一个便利的小部件，结合了常见的绘画，定位和大小调整小部件。<br>由于Container结合了许多其他小部件，每个小部件都有自己的布局行为，因此Container的布局行为有点复杂。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    this<span class="selector-class">.alignment</span>,</span><br><span class="line">    this<span class="selector-class">.padding</span>,</span><br><span class="line">    Color <span class="attribute">color</span>,</span><br><span class="line">    Decoration decoration,</span><br><span class="line">    this<span class="selector-class">.foregroundDecoration</span>,</span><br><span class="line">    double <span class="attribute">width</span>,</span><br><span class="line">    double <span class="attribute">height</span>,</span><br><span class="line">    BoxConstraints constraints,</span><br><span class="line">    this<span class="selector-class">.margin</span>,</span><br><span class="line">    this<span class="selector-class">.transform</span>,</span><br><span class="line">    this<span class="selector-class">.child</span>,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>key：Container唯一标识符，用于查找更新。</li><li>alignment：控制child的对齐方式，如果container或者container父节点尺寸大于child的尺寸，这个属性设置会起作用，有很多种对齐方式。</li><li>padding：decoration内部的空白区域，如果有child的话，child位于padding内部。padding与margin的不同之处在于，padding是包含在content内，而margin则是外部边界，设置点击事件的话，padding区域会响应，而margin区域不会响应。</li><li>color：用来设置container背景色，如果foregroundDecoration设置的话，可能会遮盖color效果。</li><li>decoration：绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。</li><li>foregroundDecoration：绘制在child前面的装饰。</li><li>width：container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据child和父节点两者一起布局。</li><li>height：container的高度，设置为double.infinity可以强制在高度上撑满。</li><li>constraints：添加到child上额外的约束条件。</li><li>margin：围绕在decoration和child之外的空白区域，不属于内容区域。</li><li>transform：设置container的变换矩阵，类型为Matrix4。</li><li>child：container中的内容widget。</li></ul><h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><p>Padding作为一个基础的控件，功能非常单一，给子节点设置padding属性。写过其他端的都了解这个属性，就是设置内边距属性，内边距的空白区域，也是widget的一部分。</p><h3 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h3><p>Align本身实现的功能并不复杂，设置child的对齐方式，例如居中、居左居右等，并根据child尺寸调节自身尺寸。</p><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><p>对齐方式。一般会使用系统默认提供的9种方式。<br>Alignment实际上是包含了两个属性的，其中第一个参数，-1.0是左边对齐，1.0是右边对齐，第二个参数，-1.0是顶部对齐，1.0是底部对齐。</p><h3 id="Center"><a href="#Center" class="headerlink" title="Center"></a>Center</h3><p>Center继承自Align，只不过是将alignment设置为Alignment.center，其他属性例如widthFactor、heightFactor，布局行为，都与Align完全一样。但没有设置alignment属性，是因为Align默认的对齐方式就是居中。</p><h3 id="FittedBox"><a href="#FittedBox" class="headerlink" title="FittedBox"></a>FittedBox</h3><p>FittedBox是一个容器，它会在自己的尺寸范围内缩放并且调整child位置，使得child适合其尺寸。</p><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const FittedBox(&#123;</span><br><span class="line">Key key,</span><br><span class="line">this<span class="selector-class">.fit</span>: BoxFit<span class="selector-class">.contain</span>,</span><br><span class="line">this<span class="selector-class">.alignment</span>: Alignment<span class="selector-class">.center</span>,</span><br><span class="line">Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul><li>fit：缩放的方式，默认的属性是BoxFit.contain，child在FittedBox范围内，尽可能的大，但是不超出其尺寸。这里注意一点，contain是保持着child宽高比的大前提下，尽可能的填满，一般情况下，宽度或者高度达到最大值时，就会停止缩放。</li><li>alignment：对齐方式，默认的属性是Alignment.center，居中显示child。</li></ul><h3 id="AspectRatio"><a href="#AspectRatio" class="headerlink" title="AspectRatio"></a>AspectRatio</h3><p>AspectRatio是调整child到设置的宽高比。</p><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><p>aspectRatio：aspectRatio是宽高比，最终可能不会根据这个值去布局，具体则要看综合因素，外层是否允许按照这种比率进行布局，只是一个参考值。</p><h3 id="ConstrainedBox"><a href="#ConstrainedBox" class="headerlink" title="ConstrainedBox"></a>ConstrainedBox</h3><p>ConstrainedBox是添加额外的限制条件（constraints）到child上。</p><h3 id="UnconstrainedBox"><a href="#UnconstrainedBox" class="headerlink" title="UnconstrainedBox"></a>UnconstrainedBox</h3><p>UnconstrainedBox刚好与ConstrainedBox相反，是不添加任何约束条件到child上，让child按照其原始的尺寸渲染。</p><h3 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h3><p>Baseline会根据child的baseline，来调整child的位置。</p><h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><ul><li>baseline：baseline数值，必须要有，从顶部算。</li><li>baselineType：baseline类型，也是必须要有的，目前有两种类型：<ul><li>alphabetic：对齐字符底部的水平线；</li><li>ideographic：对齐表意字符的水平线。</li></ul></li></ul><h3 id="FractionallySizedBox"><a href="#FractionallySizedBox" class="headerlink" title="FractionallySizedBox"></a>FractionallySizedBox</h3><p>FractionallySizedBox会根据现有空间，来调整child的尺寸。</p><h4 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h4><ul><li>alignment：对齐方式，不能为null。</li><li>widthFactor：宽度因子，跟之前介绍的控件类似，宽度乘以这个值，就是最后的宽度。</li><li>heightFactor：高度因子，用作计算最后实际高度的。</li></ul><p>其中widthFactor和heightFactor都有一个规则</p><ul><li>如果不为null，那么实际的最大宽高度则为child的宽高乘以这个因子；</li><li>如果为null，那么child的宽高则会尽量充满整个区域。</li></ul><h3 id="IntrinsicHeight"><a href="#IntrinsicHeight" class="headerlink" title="IntrinsicHeight"></a>IntrinsicHeight</h3><p>IntrinsicHeight是调整child到固定的高度。</p><h3 id="IntrinsicWidth"><a href="#IntrinsicWidth" class="headerlink" title="IntrinsicWidth"></a>IntrinsicWidth</h3><p>IntrinsicWidth跟IntrinsicHeight类似，是调整child到固定的宽度。</p><h3 id="LimitedBox"><a href="#LimitedBox" class="headerlink" title="LimitedBox"></a>LimitedBox</h3><p>LimitedBox是对child最大宽高进行限制的控件。</p><h3 id="Offstage"><a href="#Offstage" class="headerlink" title="Offstage"></a>Offstage</h3><p>Offstage通过一个参数，来控制控件是否显示。当控件不显示时(offstage为true)，不会响应点击事件，也不会占用空间。</p><h3 id="OverflowBox"><a href="#OverflowBox" class="headerlink" title="OverflowBox"></a>OverflowBox</h3><p>OverflowBox允许child超出parent的范围显示。当OverflowBox的最大尺寸大于child的时候，child可以完整显示，当其小于child的时候，则以最大尺寸为基准，当然，这个尺寸都是可以突破父节点的。最后加上对齐方式，完成布局。</p><h4 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h4><ul><li>alignment：对齐方式。</li><li>minWidth：允许child的最小宽度。如果child宽度小于这个值，则按照最小宽度进行显示。</li><li>maxWidth：允许child的最大宽度。如果child宽度大于这个值，则按照最大宽度进行展示。</li><li>minHeight：允许child的最小高度。如果child高度小于这个值，则按照最小高度进行显示。</li><li>maxHeight：允许child的最大高度。如果child高度大于这个值，则按照最大高度进行展示。<br>其中，最小以及最大宽高度，如果为null的时候，就取父节点的constraint代替。</li></ul><h3 id="SizedBox"><a href="#SizedBox" class="headerlink" title="SizedBox"></a>SizedBox</h3><p>SizedBox用于强制设置child的具体尺寸。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2-Flutter之路-布局&quot;&gt;&lt;a href=&quot;#2-Flutter之路-布局&quot; class=&quot;headerlink&quot; title=&quot;2. Flutter之路-布局&quot;&gt;&lt;/a&gt;2. Flutter之路-布局&lt;/h1&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://skyz319.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://skyz319.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>1. Flutter 初识</title>
    <link href="http://skyz319.github.io/2019/08/09/1-Flutter-%E5%88%9D%E8%AF%86/"/>
    <id>http://skyz319.github.io/2019/08/09/1-Flutter-初识/</id>
    <published>2019-08-09T06:26:42.000Z</published>
    <updated>2019-08-09T09:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-初识"><a href="#Flutter-初识" class="headerlink" title="Flutter 初识"></a>Flutter 初识</h1><a id="more"></a><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。</p><p>Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。</p><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p><p><a href="https://github.com/flutter/flutter" target="_blank" rel="noopener">Flutter</a>是一套移动UI框架，可以快速在iOS、Android以及Fuchsia上构建高质量的原生用户界面。 目前Flutter是完全免费、开源的。官方编程语言为<a href="https://www.dartlang.org/" target="_blank" rel="noopener">Dart</a>，也是一门全新的语言。所以说，上手成本比较高，对于移动端开发人员，语言以及框架都是全新的，整个技术栈的积累也都得从头开始。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>快速开发：Flutter的热重载可以快速地进行测试、构建UI、添加功能并更快地修复错误。</li><li>富有表现力，漂亮的用户界面：自带的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果。</li><li>响应式框架：使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。</li><li>访问本地功能和SDK：Flutter可以复用现有的Java、Swift或ObjC代码，访问iOS和Android上的原生系统功能和系统SDK。</li><li>统一的应用开发体验：Flutter拥有丰富的工具和库，可以帮助开发者轻松地同时在iOS和Android系统中实现想法和创意。</li><li>原生性能：Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li></ul><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Dart是谷歌开发的计算机编程语言，后来被Ecma (ECMA-408)认定为标准。它被用于web、服务器、移动应用 和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。<br>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system。</p><ul><li>Dart 中的所有东西都是对象，包括数字、函数等，它们都继承自 Object，并且对象的默认值都是 null（包括数字）。</li><li>Dart是强类型语言，但变量类型是可选的因为Dart可以自动推断变量类型。</li><li>跟某些语言不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的。</li><li>Dart 中的语句以分号结束，并且不是选的。</li><li>Dart 的类型是可选的。Dart 语言本质上是动态类型语言，可以使用 var 声明变量，一个变量也可以被赋予不同类型的对象。但大多数情况，我们不会去改变一个变量的类型。在 Dart 中也可以使用类型来声明变量，就像在静态语言中做的那样。</li><li>Dart 支持顶层的变量和函数，就像 JavaScript 一样，它并不要求你像 Java 那样把所有的东西都放到类中。</li><li>Dart 在运行之前会先解析你的代码。你可以通过使用 类型或者编译时常量来帮助 Dart 去捕获异常以及 让代码运行的更高效。</li></ul><h3 id="Dart的代码风格推荐"><a href="#Dart的代码风格推荐" class="headerlink" title="Dart的代码风格推荐"></a>Dart的代码风格推荐</h3><p><a href="http://dart.goodev.org/guides/language/effective-dart/design#type-annotations" target="_blank" rel="noopener">代码风格推荐</a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="Variables-变量"><a href="#Variables-变量" class="headerlink" title="Variables(变量)"></a>Variables(变量)</h4><p>Dart中，所有东西都是对象，包括数字、函数等。它们都继承自Object。</p><h5 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h5><p>在Dart中，未进行初始化的变量会自动获取一个<code>null</code>值。</p><h5 id="var变量"><a href="#var变量" class="headerlink" title="var变量"></a>var变量</h5><p>Dart中变量通过<code>var</code>进行定义。它可接收任意类型，但<strong>请注意</strong>，Dart中的var变量一旦赋值，类型便会确定，<strong>不能再进行更改</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  x变量引用了一个内容为hello~的String对象。</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="symbol">'hello</span>~`;</span><br><span class="line"><span class="comment">//  出错！变量类型不能更改</span></span><br><span class="line">x = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></p><h5 id="Optional-types-可选类型"><a href="#Optional-types-可选类型" class="headerlink" title="Optional types - 可选类型"></a>Optional types - 可选类型</h5><p>在声明变量时，可加上具体的类型。添加类型可以更加清晰表达你的意图，且IDE也可 以使用该类型来更好的帮助你。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">name</span> = <span class="string">'Jack'</span>;</span><br></pre></td></tr></table></figure></p><h5 id="dynamic和Object"><a href="#dynamic和Object" class="headerlink" title="dynamic和Object"></a>dynamic和Object</h5><ul><li><code>Object</code>是Dart所有对象的基类。所有类型的数据都可以赋值给<code>Object</code>声明的对象。</li><li><code>dynamic</code>与<code>var</code>一样都是关键词，声明的变量可以赋值任意对象。<h6 id="dynamic和Object的异同"><a href="#dynamic和Object的异同" class="headerlink" title="dynamic和Object的异同"></a>dynamic和Object的异同</h6><code>dynamic</code>与<code>Object</code>的相同处在于：它们声明的变量都可以在后期改变赋值类型。<br>但<code>Object</code>声明的对象只能使用<code>Object</code>的属性与方法，而<code>dynamic</code>声明的对象编译器会提供所有可能的组合。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> x;</span><br><span class="line"><span class="built_in">Object</span> y;</span><br><span class="line">main() &#123;</span><br><span class="line">    x = <span class="string">''</span>;</span><br><span class="line">    y = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">//  正常</span></span><br><span class="line">    <span class="built_in">print</span>(x.length);</span><br><span class="line">    <span class="comment">//  Object的属性及方法没有length。报错</span></span><br><span class="line">    <span class="built_in">print</span>(y.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Final-and-const"><a href="#Final-and-const" class="headerlink" title="Final and const"></a>Final and const</h5><p>如果你以后不打算修改一个变量，使用 <code>final</code> 或者<code>const</code>。</p><p> 一个final 变量只能赋值一次；一个const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在第一次使用的时候初始化。</p><p><code>const</code> 变量为编译时常量。 如果 const 变量在类中，请定义为 <code>static const</code>。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。<br><code>const</code> 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//可以省略<span class="keyword">String这个类型声明</span></span><br><span class="line"><span class="keyword">final </span><span class="keyword">str </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br><span class="line">//final <span class="keyword">String </span><span class="keyword">str </span>= <span class="string">"hi world"</span><span class="comment">; </span></span><br><span class="line"><span class="symbol">const</span> <span class="keyword">str1 </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br><span class="line">//const <span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hi world"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h5 id="Built-in-types-内置的类型"><a href="#Built-in-types-内置的类型" class="headerlink" title="Built-in types(内置的类型)"></a>Built-in types(内置的类型)</h5><p>Dart内置支持以下类型：</p><ul><li><code>numbers</code>：<code>int</code>与<code>double</code>;<br>-<code>strings</code>: UTF-16 编码的字符序列。 可以使用单引号或者双引号来创建字符串;</li><li><code>booleans</code>:Dart 有一个名字为<code>bool</code> 的类型。 只有两个对象是布尔类型的：<code>true</code>和<code>false</code> 所创建的对象， 这两个对象也都是编译时常量。</li><li><code>lists</code> (也被称之为 arrays或有序集合)</li><li><code>maps</code>：Map是一个键值对相关的对象。键和值可以是任何类型的对象，每个<strong>键</strong>只出现一个。</li><li><code>runes</code> (用于在字符串中表示 Unicode 字符)：在 Dart 中，runes 代表字符串的 UTF-32 code points。</li><li><code>symbols</code>：一个 Symbol object 代表 Dart 程序中声明的操作符或者标识符。使用 Symbol 字面量来获取标识符的 symbol 对象，也就是在标识符 前面添加一个 # 符号;</li></ul><p>可以在字符串中使用表达式，用法是这样的： <code>${expression}</code>。如果表达式是一个比赛服，可以省略 {}。 如果表达式的结果为一个对象，则 Dart 会调用对象的 `toString() 函数来获取一个字符串。</p><h5 id="Functions（方法）"><a href="#Functions（方法）" class="headerlink" title="Functions（方法）"></a>Functions（方法）</h5><p>Dart 是一个真正的面向对象语言，方法也是对象并且具有一种 类型，<code>Function</code>。 这意味着，方法可以赋值给变量，也可以当做其他方法的参数。 也可以把 Dart 类的实例当做方法来调用。 </p><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p><strong>本文仅针对Mac</strong><br>其它平台参见：<br><a href="https://flutterchina.club/setup-windows/" target="_blank" rel="noopener">在Windows上搭建Flutter开发环境</a>与<a href="https://flutterchina.club/setup-linux/" target="_blank" rel="noopener">在Linux上搭建Flutter开发环境</a></p><h3 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h3><p>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></p><h3 id="安装Flutter及Dart"><a href="#安装Flutter及Dart" class="headerlink" title="安装Flutter及Dart"></a>安装Flutter及Dart</h3><p>Dart SDK已经在捆绑在Flutter里了，没有必要单独安装Dart。</p><h4 id="SDK下载及环境变量设置"><a href="#SDK下载及环境变量设置" class="headerlink" title="SDK下载及环境变量设置"></a>SDK下载及环境变量设置</h4><ol><li>从<a href="https://flutter.dev/docs/development/tools/sdk/releases#macos" target="_blank" rel="noopener">官网下载页</a>或<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">官方Github</a>中下载或克隆相应平台的安装包。(个人不推荐使用git clone,也许是地区原因，作者这边clone时极慢极慢。。)</li><li>解压安装包至你想要的地方，如：<code>/User/userName/Flutter</code></li><li>在环境变量中增加<code>export PATH=</code>pwd<code>/flutter/bin:$PATH</code>。</li><li>执行<code>echo $PATH</code>检查Flutter是否已加入到PATH中。</li></ol><h4 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h4><p>在命令行下，运行<code>flutter doctor</code>或<code>flutter doctor -v</code>检查环境并在终端窗口中显示报告。仔细查看检查结果，问题项会用<code>✗</code>标出。该命令检查并指出未安装/缺失/存在问题的组件/依赖等，根据命令指示进行安装。安装完成后再次执行进行检查。直到提示<code>No issues found!</code>。<br>另外，在<code>flutter doctor</code>运行时，会下载它自己的依赖项并自行编译。所以，请<strong>耐心等待</strong>。</p><h3 id="平台设置"><a href="#平台设置" class="headerlink" title="平台设置"></a>平台设置</h3><p>macOS支持为iOS和Android开发Flutter应用程序。所以，需要安装相应的IDE及SDK。</p><h4 id="iOS-平台"><a href="#iOS-平台" class="headerlink" title="iOS 平台"></a>iOS 平台</h4><ol><li>在苹果商店中安装Xcode并至少打开一次。(确保Xcode许可协议同意过)</li><li>命令行执行<code>open -a Simulator</code>启动iOS模拟器。</li><li><p>执行以下命令来安装用于Flutter安装到iOS设备的工具：</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>  安装Homebrew,已安装的可省略</span><br><span class="line"><span class="string">/usr/bin/ruby</span> -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br><span class="line"><span class="string">//</span>  开始安装相应工具</span><br><span class="line">brew update</span><br><span class="line">brew install <span class="params">--HEAD</span> libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class="line">pod setup   <span class="string">//</span>  执行时间超长<span class="string">...</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Android-平台"><a href="#Android-平台" class="headerlink" title="Android 平台"></a>Android 平台</h4><p>Android Studio下载需梯子，可查找国内源进行下载并进行SDK更新等。<br>Android Studio是谷歌官推的，安装flutter插件后，开发起来相对于其他IDE来说，方便很多，自带了三种模板：</p><ul><li>Flutter Application： Flutter应用</li><li>Flutter Plugin：Flutter插件</li><li>Flutter Package：纯Dart组件</li></ul><p>安装步骤：</p><ol><li>安装<a href="https://www.java.com/zh_CN/download/mac_download.jsp" target="_blank" rel="noopener">Java</a>。</li><li>准备好梯子…</li><li>安装<a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android Studio</a>或<a href="https://www.jetbrains.com/idea/?fromMenu" target="_blank" rel="noopener">IntelliJ IDEA</a>。</li><li>安装最新的Android SDK、Android SDK平台工具和Android SDK构建工具。</li><li>为Java和Android配置环境变量</li></ol><h4 id="安装Flutter与Dart插件"><a href="#安装Flutter与Dart插件" class="headerlink" title="安装Flutter与Dart插件"></a>安装Flutter与Dart插件</h4><h5 id="Android-Studio和IntelliJ-IDea"><a href="#Android-Studio和IntelliJ-IDea" class="headerlink" title="Android Studio和IntelliJ IDea"></a>Android Studio和IntelliJ IDea</h5><p>在Android Studio和IntelliJ IDea中，Flutter用到两个插件：</p><ul><li><code>Flutter插件</code>: 支持Flutter开发（运行、测试、热重载等）。</li><li><code>Dart插件</code>: 提供代码支持（代码输入时验证、补全等）。<br>安装步骤：</li><li>打开IDE并打开插件首选项(Preferences &gt; Plugins)</li><li>选择Browse repositories…，搜索flutter插件并进行安装。安装后会提示安装Dart插件。<h5 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h5>在插件中查找并安装<code>Flutter</code>、<code>Dart</code>和<code>Awesome Flutter Snippets</code>。</li></ul><h3 id="升级Flutter-SDK及依赖包"><a href="#升级Flutter-SDK及依赖包" class="headerlink" title="升级Flutter SDK及依赖包"></a>升级Flutter SDK及依赖包</h3><ul><li><code>flutter upgrade</code>：升级SDK及flutter项目的依赖包。</li><li><code>flutter packages get</code>: 获取项目所有的依赖包。</li><li><code>flutter packages upgrade</code>: 获取项目所有依赖包的最新版本。</li></ul><h3 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h3><p>再次运行<code>flutter doctor</code>检查环境并在终端窗口中显示报告。直到提示<code>No issues found!</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flutter-初识&quot;&gt;&lt;a href=&quot;#Flutter-初识&quot; class=&quot;headerlink&quot; title=&quot;Flutter 初识&quot;&gt;&lt;/a&gt;Flutter 初识&lt;/h1&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://skyz319.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://skyz319.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>随笔(5)</title>
    <link href="http://skyz319.github.io/2019/01/07/%E9%9A%8F%E7%AC%94-5/"/>
    <id>http://skyz319.github.io/2019/01/07/随笔-5/</id>
    <published>2019-01-07T01:34:02.000Z</published>
    <updated>2019-01-07T01:34:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(4)</title>
    <link href="http://skyz319.github.io/2019/01/04/%E9%9A%8F%E7%AC%94-4/"/>
    <id>http://skyz319.github.io/2019/01/04/随笔-4/</id>
    <published>2019-01-04T00:54:21.000Z</published>
    <updated>2019-01-04T00:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(3)</title>
    <link href="http://skyz319.github.io/2018/12/29/%E9%9A%8F%E7%AC%94-3/"/>
    <id>http://skyz319.github.io/2018/12/29/随笔-3/</id>
    <published>2018-12-29T00:40:39.000Z</published>
    <updated>2018-12-29T00:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(2)</title>
    <link href="http://skyz319.github.io/2018/12/28/%E9%9A%8F%E7%AC%94-2/"/>
    <id>http://skyz319.github.io/2018/12/28/随笔-2/</id>
    <published>2018-12-28T00:43:59.000Z</published>
    <updated>2018-12-28T00:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>随笔(1)</title>
    <link href="http://skyz319.github.io/2018/12/27/%E9%9A%8F%E7%AC%94-1/"/>
    <id>http://skyz319.github.io/2018/12/27/随笔-1/</id>
    <published>2018-12-27T01:12:19.000Z</published>
    <updated>2018-12-28T00:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="杂" scheme="http://skyz319.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Go-Ethereum源码解析</title>
    <link href="http://skyz319.github.io/2018/12/26/go-ethereum%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://skyz319.github.io/2018/12/26/go-ethereum源码解析/</id>
    <published>2018-12-26T01:25:39.000Z</published>
    <updated>2018-12-28T00:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-ethereum源码解析"><a href="#go-ethereum源码解析" class="headerlink" title="go-ethereum源码解析"></a>go-ethereum源码解析</h1><a id="more"></a><h2 id="搭建go-ethereum环境"><a href="#搭建go-ethereum环境" class="headerlink" title="搭建go ethereum环境"></a>搭建go ethereum环境</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Mac OS 10.13.6<br><strong>虚拟机</strong>：CentOS Linux release 7.5.1804<br>虚拟机与物理机已进行目录共享。<br>Visual Studio Code</p><h3 id="克隆源码-amp-安装Geth"><a href="#克隆源码-amp-安装Geth" class="headerlink" title="克隆源码&amp;安装Geth"></a>克隆源码&amp;安装Geth</h3><ol><li><p>在合适的目录下克隆go-ethereum代码.</p><p> <code>git clone https://github.com/ethereum/go-ethereum.git</code></p></li><li><p>编译. </p><p> <code></code>  cd go-ethereum </p><pre><code>make geth``</code></pre></li><li><p>将Geth移动至<code>/usr/local/bin</code><br> <code>cp /root/tmp/go-etereum/build/bin/geth /usr/local/bin</code></p></li></ol><h2 id="以太坊的核心概念"><a href="#以太坊的核心概念" class="headerlink" title="以太坊的核心概念"></a>以太坊的核心概念</h2><ul><li>EVM:以太坊虚拟机，是以太坊中智能合约的运行环境，不仅是沙箱，实际上是完全隔离的，使EVM内部运行的代码无法访问网络、文件系统或其它进程。</li><li>Account: 账户，分为合约账户及外部账户。合约账号主要存储执行的合约代码，外部账号存储以太币，对应具体公钥。</li><li>Transaction:以太网络上的交易，从一个账户到另一个账户的消息，包括以太币或智能合约的参数。</li><li>Gas: 以太网络运行时的花销(燃料)，每执行一条智能合约，都会消耗一定燃料，以保证网络避免受到无聊或恶意的计算任务。</li><li>Mine: 挖矿，以太通过工作量证明算法来保证网络的安全运行。挖矿的任务是解决复杂的数学问题，以便成功“挖掘”一个区块。这被称为“工作证明”。工作证明具有ASIC抗性。</li><li>P2P网络： 以太坊分布是分布式，没有中心服务器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;go-ethereum源码解析&quot;&gt;&lt;a href=&quot;#go-ethereum源码解析&quot; class=&quot;headerlink&quot; title=&quot;go-ethereum源码解析&quot;&gt;&lt;/a&gt;go-ethereum源码解析&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Go" scheme="http://skyz319.github.io/tags/Go/"/>
    
      <category term="区块链" scheme="http://skyz319.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>重头再来 只为更好的自己</title>
    <link href="http://skyz319.github.io/2016/12/29/%E9%87%8D%E5%A4%B4%E5%86%8D%E6%9D%A5-%E5%8F%AA%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://skyz319.github.io/2016/12/29/重头再来-只为更好的自己/</id>
    <published>2016-12-29T07:19:00.000Z</published>
    <updated>2016-12-29T07:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg" alt=""></p><p>将博客的内容清除了个干净,放空一下自己.</p><p><strong>2017,一定会要做更棒的自己!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将博客的内容清除了个干净,放空一下自己.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2017,一定会要做更棒的自己!&lt;/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读&lt;你的命运不是一头骡子&gt;有感</title>
    <link href="http://skyz319.github.io/2016/07/19/%E8%AF%BB%E3%80%8A%E4%BD%A0%E7%9A%84%E5%91%BD%E8%BF%90%E4%B8%8D%E6%98%AF%E4%B8%80%E5%A4%B4%E9%AA%A1%E5%AD%90%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://skyz319.github.io/2016/07/19/读《你的命运不是一头骡子》有感/</id>
    <published>2016-07-19T01:07:34.000Z</published>
    <updated>2018-08-23T06:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了阮一峰老师的博客《<a href="http://www.ruanyifeng.com/blog/2016/06/your-destiny-is-not-like-a-mule.html" target="_blank" rel="noopener">你的命运不是一头骡子</a>》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….</p><a id="more"></a><p>以下是原文:</p><blockquote><p>《黑客与画家》的作者保罗•格雷厄姆，做过一个非常好的概括。</p><blockquote><p>“……（你）只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，其实与一个挖水沟的工人是一样的，从这头挖到那头，仅此而已，从事的都是机械性的工作。”</p></blockquote><p>我不是说这样的流程有什么不对，而是说在这个流程里，人只是充当一种工具。就像骡子只是铁管上山的一种手段，你只是产出代码的一种手段，本身并没有”自由意志”体现在里面。或者说，你身上体现的都是他人的（或资本的）意志，你无法表现出自我。评价骡子的标准是，铁管背得比较多、比较快，评价软件工程师的标准又何尝不是如此呢，都是看是否忠实有效地实现那些外部意志。<br>我见过许多年轻的程序员勤奋工作，从早到晚一刻不停地编码，周末也来加班，努力完成公司的一个个目标，从来不问、甚至不想”这种需求对不对”、”这个功能有没有必要”，更不要说想一想”我的人生规划是什么”。中国的现实也很残酷，公司的哲学就是告诉你做什么，你就做什么，不想做就离开。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到了阮一峰老师的博客《&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/06/your-destiny-is-not-like-a-mule.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你的命运不是一头骡子&lt;/a&gt;》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….&lt;/p&gt;
    
    </summary>
    
      <category term="感想" scheme="http://skyz319.github.io/categories/%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="感想" scheme="http://skyz319.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
</feed>
