{"total":10,"pageSize":10,"pageCount":1,"data":[{"title":"Flutter系列:2.第一个Flutter应用","slug":"Flutter系列-2-第一个Flutter应用","date":"2019-07-31T07:47:48.000Z","updated":"2019-08-08T08:14:13.765Z","comments":true,"path":"api/articles/Flutter系列-2-第一个Flutter应用.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Flutter起飞系列之第一个Flutter应用\"><a href=\"#Flutter起飞系列之第一个Flutter应用\" class=\"headerlink\" title=\"Flutter起飞系列之第一个Flutter应用\"></a>Flutter起飞系列之第一个Flutter应用</h1><p><strong>基于Mac下的VS Code </strong></p>\n<h2 id=\"Dart-语言\"><a href=\"#Dart-语言\" class=\"headerlink\" title=\"Dart 语言\"></a>Dart 语言</h2><blockquote>\n<p>Dart 是一种 易于学习、 易于扩展、并且可以部署到 任何地方 的 应用 编程 语言。Google 使用 Dart 来开发 大型应用。</p>\n</blockquote>\n<p>Dart 语言在2011年10月由 Google 发布的一种结构化的Web开发语言，既让人感觉熟悉，又足够灵活。既适用于快速原型开发，又适用于组织大型的代码库。既可以用在桌面版和移动版的浏览器中，也可以在服务器端使用。</p>\n<ul>\n<li>Dart 中的所有东西都是对象，包括数字、函数等，它们都继承自 Object，并且对象的默认值都是 null（包括数字）。</li>\n<li>Dart是强类型语言，但变量类型是可选的因为Dart可以自动推断变量类型。</li>\n<li>跟某些语言不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的。</li>\n<li>Dart 中的语句以分号结束，并且不是选的。</li>\n<li>Dart 的类型是可选的。Dart 语言本质上是动态类型语言，可以使用 var 声明变量，一个变量也可以被赋予不同类型的对象。但大多数情况，我们不会去改变一个变量的类型。在 Dart 中也可以使用类型来声明变量，就像在静态语言中做的那样。</li>\n<li>Dart 支持顶层的变量和函数，就像 JavaScript 一样，它并不要求你像 Java 那样把所有的东西都放到类中。</li>\n<li>Dart 在运行之前会先解析你的代码。你可以通过使用 类型或者编译时常量来帮助 Dart 去捕获异常以及 让代码运行的更高效。</li>\n</ul>\n<h3 id=\"Dart的代码风格推荐\"><a href=\"#Dart的代码风格推荐\" class=\"headerlink\" title=\"Dart的代码风格推荐\"></a>Dart的代码风格推荐</h3><p><a href=\"http://dart.goodev.org/guides/language/effective-dart/design#type-annotations\" target=\"_blank\" rel=\"noopener\">代码风格推荐</a></p>\n<h3 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h3><p>Dart中，所有东西都是对象，包括数字、函数等。它们都继承自Object。</p>\n<h4 id=\"变量的默认值\"><a href=\"#变量的默认值\" class=\"headerlink\" title=\"变量的默认值\"></a>变量的默认值</h4><p>在Dart中，未进行初始化的变量会自动获取一个<code>null</code>值。</p>\n<h4 id=\"var变量\"><a href=\"#var变量\" class=\"headerlink\" title=\"var变量\"></a>var变量</h4><p>Dart中变量通过<code>var</code>进行定义。它可接收任意类型，但<strong>请注意</strong>，Dart中的var变量一旦赋值，类型便会确定，<strong>不能再进行更改</strong>。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  x变量引用了一个内容为hello~的String对象。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"symbol\">'hello</span>~`;</span><br><span class=\"line\"><span class=\"comment\">//  出错！变量类型不能更改</span></span><br><span class=\"line\">x = <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Optional-types-可选类型\"><a href=\"#Optional-types-可选类型\" class=\"headerlink\" title=\"Optional types - 可选类型\"></a>Optional types - 可选类型</h4><p>在声明变量时，可加上具体的类型。添加类型可以更加清晰表达你的意图，且IDE也可 以使用该类型来更好的帮助你。<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">String</span> <span class=\"keyword\">name</span> = <span class=\"string\">'Jack'</span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"dynamic和Object\"><a href=\"#dynamic和Object\" class=\"headerlink\" title=\"dynamic和Object\"></a>dynamic和Object</h4><ul>\n<li><code>Object</code>是Dart所有对象的基类。所有类型的数据都可以赋值给<code>Object</code>声明的对象。</li>\n<li><code>dynamic</code>与<code>var</code>一样都是关键词，声明的变量可以赋值任意对象。<h5 id=\"dynamic和Object的异同\"><a href=\"#dynamic和Object的异同\" class=\"headerlink\" title=\"dynamic和Object的异同\"></a>dynamic和Object的异同</h5><code>dynamic</code>与<code>Object</code>的相同处在于：它们声明的变量都可以在后期改变赋值类型。<br>但<code>Object</code>声明的对象只能使用<code>Object</code>的属性与方法，而<code>dynamic</code>声明的对象编译器会提供所有可能的组合。</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dynamic</span> x;</span><br><span class=\"line\"><span class=\"built_in\">Object</span> y;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    x = <span class=\"string\">''</span>;</span><br><span class=\"line\">    y = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  正常</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x.length);</span><br><span class=\"line\">    <span class=\"comment\">//  Object的属性及方法没有length。报错</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(y.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Final-and-const\"><a href=\"#Final-and-const\" class=\"headerlink\" title=\"Final and const\"></a>Final and const</h4><p>如果你以后不打算修改一个变量，使用 <code>final</code> 或者<code>const</code>。</p>\n<p> 一个final 变量只能赋值一次；一个const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在第一次使用的时候初始化。</p>\n<p><code>const</code> 变量为编译时常量。 如果 const 变量在类中，请定义为 <code>static const</code>。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。<br><code>const</code> 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以省略<span class=\"keyword\">String这个类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">final </span><span class=\"keyword\">str </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">//final <span class=\"keyword\">String </span><span class=\"keyword\">str </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">; </span></span><br><span class=\"line\"><span class=\"symbol\">const</span> <span class=\"keyword\">str1 </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">//const <span class=\"keyword\">String </span><span class=\"keyword\">str1 </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Built-in-types-内置的类型\"><a href=\"#Built-in-types-内置的类型\" class=\"headerlink\" title=\"Built-in types(内置的类型)\"></a>Built-in types(内置的类型)</h4><p>Dart内置支持以下类型：</p>\n<ul>\n<li><code>numbers</code>：<code>int</code>与<code>double</code>;<br>-<code>strings</code>: UTF-16 编码的字符序列。 可以使用单引号或者双引号来创建字符串;</li>\n<li><code>booleans</code>:Dart 有一个名字为<code>bool</code> 的类型。 只有两个对象是布尔类型的：<code>true</code>和<code>false</code> 所创建的对象， 这两个对象也都是编译时常量。</li>\n<li><code>lists</code> (也被称之为 arrays或有序集合)</li>\n<li><code>maps</code>：Map是一个键值对相关的对象。键和值可以是任何类型的对象，每个<strong>键</strong>只出现一个。</li>\n<li><code>runes</code> (用于在字符串中表示 Unicode 字符)：在 Dart 中，runes 代表字符串的 UTF-32 code points。</li>\n<li><code>symbols</code>：一个 Symbol object 代表 Dart 程序中声明的操作符或者标识符。使用 Symbol 字面量来获取标识符的 symbol 对象，也就是在标识符 前面添加一个 # 符号;</li>\n</ul>\n<p>可以在字符串中使用表达式，用法是这样的： <code>${expression}</code>。如果表达式是一个比赛服，可以省略 {}。 如果表达式的结果为一个对象，则 Dart 会调用对象的 `toString() 函数来获取一个字符串。</p>\n<h3 id=\"Functions（方法）\"><a href=\"#Functions（方法）\" class=\"headerlink\" title=\"Functions（方法）\"></a>Functions（方法）</h3><p>Dart 是一个真正的面向对象语言，方法也是对象并且具有一种 类型，<code>Function</code>。 这意味着，方法可以赋值给变量，也可以当做其他方法的参数。 也可以把 Dart 类的实例当做方法来调用。 </p>\n<h2 id=\"创建Flutter应用\"><a href=\"#创建Flutter应用\" class=\"headerlink\" title=\"创建Flutter应用\"></a>创建Flutter应用</h2><ol>\n<li>VS Code中，使用快捷键<code>command + shift + p</code>呼出<strong>命令面板</strong>，键入<code>&gt;Flutter:new Project</code>(可忽略大小写或在下方选择）。</li>\n<li>输入应用名称并回车</li>\n<li>选择项目文件夹后选择右下<code>Select a folder to create the project in</code>按钮或直接回车。</li>\n<li>新建文件夹会自动进行检查依赖，请等待其完成。</li>\n<li>点击VS Code左侧调试图标，在顶部调试菜单点<strong>齿轮按钮(配置或修复launch.json)</strong>后会自动生成相应配置。</li>\n<li>在启动调试时，会进行模拟器选择。前提是安装好XCode或Android SVD。可使用<code>flutter devices</code>识别并查看连接的移动设备。</li>\n</ol>\n<p>至此项目新建完成。</p>\n","text":"Flutter起飞系列之第一个Flutter应用基于Mac下的VS Code Dart 语言Dart 是一种 易于学习、 易于扩展、并且可以部署到 任何地方 的 应用 编程 语言。Google 使用 Dart 来开发 大型应用。Dart 语言在2011年10月由 Google 发","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Flutter","slug":"Flutter","count":2,"path":"api/tags/Flutter.json"}]},{"title":"Flutter系列:1.安装配置","slug":"Flutter系列-1-安装配置","date":"2019-07-31T07:46:35.000Z","updated":"2019-07-31T09:00:53.862Z","comments":true,"path":"api/articles/Flutter系列-1-安装配置.json","excerpt":"<h1 id=\"什么是Flutter\"><a href=\"#什么是Flutter\" class=\"headerlink\" title=\"什么是Flutter\"></a>什么是Flutter</h1>","keywords":null,"cover":null,"content":null,"text":"什么是FlutterFlutter是Google发布的一个用于创建跨平台、高性能移动应用的框架。2017 年 Google I/O 大会上，Google 首次推出了一款新的用于创建跨平台、高性能的移动应用框架——Flutter。2018年2月，Flutter发布了第一个Beta版","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Flutter","slug":"Flutter","count":2,"path":"api/tags/Flutter.json"}]},{"title":"随笔(5)","slug":"随笔-5","date":"2019-01-07T01:34:02.000Z","updated":"2019-01-07T01:34:17.000Z","comments":true,"path":"api/articles/随笔-5.json","excerpt":"","keywords":null,"cover":null,"content":"<p>这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 </p>\n","text":"这个世界并不完美，甚至有点残酷。你无法决定下一段旅途遇见的是好事还是坏事，可你能决定面对它们的态度。你看这个世界的角度，决定了这个世界给你的温度。 ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}]},{"title":"随笔(4)","slug":"随笔-4","date":"2019-01-04T00:54:21.000Z","updated":"2019-01-04T00:54:43.000Z","comments":true,"path":"api/articles/随笔-4.json","excerpt":"","keywords":null,"cover":null,"content":"<p>有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。</p>\n","text":"有一天你将破茧而出，成长得比人们期待的还要美丽，但这个过程会很痛，会很辛苦，有时候还会觉得灰心，面对汹涌而来的现实世界，觉得自己渺小无力，但这也是生命的一部分，做好现在你能做的，然后，一切都会慢慢好起来。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}]},{"title":"随笔(3)","slug":"随笔-3","date":"2018-12-29T00:40:39.000Z","updated":"2018-12-29T00:40:53.000Z","comments":true,"path":"api/articles/随笔-3.json","excerpt":"","keywords":null,"cover":null,"content":"<p>要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。</p>\n","text":"要生活得漂亮，需要付出极大忍耐，一不抱怨，二不解释。忘掉所有那些“不可能”的借口，去坚持一个“可能”的理由。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}]},{"title":"随笔(2)","slug":"随笔-2","date":"2018-12-28T00:43:59.000Z","updated":"2018-12-28T00:46:49.000Z","comments":true,"path":"api/articles/随笔-2.json","excerpt":"","keywords":null,"cover":null,"content":"<p>做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。</p>\n","text":"做自己的英雄，独自面对世界的千军万马。真正的强者不是没有眼泪，而是含着眼泪依然奔跑。愿受过伤的你，还能好好拥抱自己，告诉自己不要怕，以后好好对自己。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}]},{"title":"随笔(1)","slug":"随笔-1","date":"2018-12-27T01:12:19.000Z","updated":"2018-12-28T00:46:58.000Z","comments":true,"path":"api/articles/随笔-1.json","excerpt":"","keywords":null,"cover":null,"content":"<p>再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！</p>\n","text":"再远的路，走着走着也就近了；再高的山，爬着爬着也就平了；再难的事，做着做着也就顺了；每次重复的能量，不是相加，而是相乘。坚持，不是为了感动谁，也不是为了证明给谁看，而是我知道，一路奔跑，总比原地踏步要好！","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"杂","slug":"杂","count":5,"path":"api/tags/杂.json"}]},{"title":"Go-Ethereum源码解析","slug":"go-ethereum源码解析","date":"2018-12-26T01:25:39.000Z","updated":"2018-12-28T00:46:16.000Z","comments":true,"path":"api/articles/go-ethereum源码解析.json","excerpt":"<h1 id=\"go-ethereum源码解析\"><a href=\"#go-ethereum源码解析\" class=\"headerlink\" title=\"go-ethereum源码解析\"></a>go-ethereum源码解析</h1>","keywords":null,"cover":null,"content":null,"text":"go-ethereum源码解析搭建go ethereum环境环境Mac OS 10.13.6<br>虚拟机：CentOS Linux release 7.5.1804<br>虚拟机与物理机已进行目录共享。<br>Visual Studio Code克隆源码&amp;安装Geth在","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Go","slug":"Go","count":1,"path":"api/tags/Go.json"},{"name":"区块链","slug":"区块链","count":1,"path":"api/tags/区块链.json"}]},{"title":"重头再来 只为更好的自己","slug":"重头再来-只为更好的自己","date":"2016-12-29T07:19:00.000Z","updated":"2016-12-29T07:38:34.000Z","comments":true,"path":"api/articles/重头再来-只为更好的自己.json","excerpt":"","keywords":null,"cover":"http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg","content":"<p><img src=\"http://7vihpo.com1.z0.glb.clouddn.com/WechatIMG1.jpeg\" alt=\"\"></p>\n<p>将博客的内容清除了个干净,放空一下自己.</p>\n<p><strong>2017,一定会要做更棒的自己!</strong></p>\n","text":" [Figure] 将博客的内容清除了个干净,放空一下自己.2017,一定会要做更棒的自己!","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"读<你的命运不是一头骡子>有感","slug":"读《你的命运不是一头骡子》有感","date":"2016-07-19T01:07:34.000Z","updated":"2018-08-23T06:13:12.000Z","comments":true,"path":"api/articles/读《你的命运不是一头骡子》有感.json","excerpt":"<p>今天看到了阮一峰老师的博客《<a href=\"http://www.ruanyifeng.com/blog/2016/06/your-destiny-is-not-like-a-mule.html\" target=\"_blank\" rel=\"noopener\">你的命运不是一头骡子</a>》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….</p>","keywords":null,"cover":null,"content":null,"text":"今天看到了阮一峰老师的博客《你的命运不是一头骡子》,突然就感觉思绪多了起来.感觉就是五味瓶被打翻….以下是原文:《黑客与画家》的作者保罗•格雷厄姆，做过一个非常好的概括。“……（你）只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，其实与一个挖水沟的工人是一样的","link":"","raw":null,"photos":[],"categories":[{"name":"感想","slug":"感想","count":1,"path":"api/categories/感想.json"}],"tags":[{"name":"感想","slug":"感想","count":1,"path":"api/tags/感想.json"}]}]}