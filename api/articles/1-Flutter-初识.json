{"title":"1. Flutter 初识","slug":"1-Flutter-初识","date":"2019-08-09T06:26:42.000Z","updated":"2019-08-09T09:08:22.000Z","comments":true,"path":"api/articles/1-Flutter-初识.json","photos":[],"link":"","excerpt":"Flutter 初识","covers":null,"content":"<h1 id=\"Flutter-初识\"><a href=\"#Flutter-初识\" class=\"headerlink\" title=\"Flutter 初识\"></a>Flutter 初识</h1><a id=\"more\"></a>\n<h2 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。</p>\n<p>Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。</p>\n<p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p><a href=\"https://github.com/flutter/flutter\" target=\"_blank\" rel=\"noopener\">Flutter</a>是一套移动UI框架，可以快速在iOS、Android以及Fuchsia上构建高质量的原生用户界面。 目前Flutter是完全免费、开源的。官方编程语言为<a href=\"https://www.dartlang.org/\" target=\"_blank\" rel=\"noopener\">Dart</a>，也是一门全新的语言。所以说，上手成本比较高，对于移动端开发人员，语言以及框架都是全新的，整个技术栈的积累也都得从头开始。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>快速开发：Flutter的热重载可以快速地进行测试、构建UI、添加功能并更快地修复错误。</li>\n<li>富有表现力，漂亮的用户界面：自带的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果。</li>\n<li>响应式框架：使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。</li>\n<li>访问本地功能和SDK：Flutter可以复用现有的Java、Swift或ObjC代码，访问iOS和Android上的原生系统功能和系统SDK。</li>\n<li>统一的应用开发体验：Flutter拥有丰富的工具和库，可以帮助开发者轻松地同时在iOS和Android系统中实现想法和创意。</li>\n<li>原生性能：Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li>\n</ul>\n<h2 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart\"></a>Dart</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Dart是谷歌开发的计算机编程语言，后来被Ecma (ECMA-408)认定为标准。它被用于web、服务器、移动应用 和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。<br>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system。</p>\n<ul>\n<li>Dart 中的所有东西都是对象，包括数字、函数等，它们都继承自 Object，并且对象的默认值都是 null（包括数字）。</li>\n<li>Dart是强类型语言，但变量类型是可选的因为Dart可以自动推断变量类型。</li>\n<li>跟某些语言不同的是，Dart没有public protected private等关键字，如果某个变量以下划线（_）开头，代表这个变量在库中是私有的。</li>\n<li>Dart 中的语句以分号结束，并且不是选的。</li>\n<li>Dart 的类型是可选的。Dart 语言本质上是动态类型语言，可以使用 var 声明变量，一个变量也可以被赋予不同类型的对象。但大多数情况，我们不会去改变一个变量的类型。在 Dart 中也可以使用类型来声明变量，就像在静态语言中做的那样。</li>\n<li>Dart 支持顶层的变量和函数，就像 JavaScript 一样，它并不要求你像 Java 那样把所有的东西都放到类中。</li>\n<li>Dart 在运行之前会先解析你的代码。你可以通过使用 类型或者编译时常量来帮助 Dart 去捕获异常以及 让代码运行的更高效。</li>\n</ul>\n<h3 id=\"Dart的代码风格推荐\"><a href=\"#Dart的代码风格推荐\" class=\"headerlink\" title=\"Dart的代码风格推荐\"></a>Dart的代码风格推荐</h3><p><a href=\"http://dart.goodev.org/guides/language/effective-dart/design#type-annotations\" target=\"_blank\" rel=\"noopener\">代码风格推荐</a></p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h4><p>Dart中，所有东西都是对象，包括数字、函数等。它们都继承自Object。</p>\n<h5 id=\"变量的默认值\"><a href=\"#变量的默认值\" class=\"headerlink\" title=\"变量的默认值\"></a>变量的默认值</h5><p>在Dart中，未进行初始化的变量会自动获取一个<code>null</code>值。</p>\n<h5 id=\"var变量\"><a href=\"#var变量\" class=\"headerlink\" title=\"var变量\"></a>var变量</h5><p>Dart中变量通过<code>var</code>进行定义。它可接收任意类型，但<strong>请注意</strong>，Dart中的var变量一旦赋值，类型便会确定，<strong>不能再进行更改</strong>。<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  x变量引用了一个内容为hello~的String对象。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"symbol\">'hello</span>~`;</span><br><span class=\"line\"><span class=\"comment\">//  出错！变量类型不能更改</span></span><br><span class=\"line\">x = <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Optional-types-可选类型\"><a href=\"#Optional-types-可选类型\" class=\"headerlink\" title=\"Optional types - 可选类型\"></a>Optional types - 可选类型</h5><p>在声明变量时，可加上具体的类型。添加类型可以更加清晰表达你的意图，且IDE也可 以使用该类型来更好的帮助你。<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">String</span> <span class=\"keyword\">name</span> = <span class=\"string\">'Jack'</span>;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"dynamic和Object\"><a href=\"#dynamic和Object\" class=\"headerlink\" title=\"dynamic和Object\"></a>dynamic和Object</h5><ul>\n<li><code>Object</code>是Dart所有对象的基类。所有类型的数据都可以赋值给<code>Object</code>声明的对象。</li>\n<li><code>dynamic</code>与<code>var</code>一样都是关键词，声明的变量可以赋值任意对象。<h6 id=\"dynamic和Object的异同\"><a href=\"#dynamic和Object的异同\" class=\"headerlink\" title=\"dynamic和Object的异同\"></a>dynamic和Object的异同</h6><code>dynamic</code>与<code>Object</code>的相同处在于：它们声明的变量都可以在后期改变赋值类型。<br>但<code>Object</code>声明的对象只能使用<code>Object</code>的属性与方法，而<code>dynamic</code>声明的对象编译器会提供所有可能的组合。</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dynamic</span> x;</span><br><span class=\"line\"><span class=\"built_in\">Object</span> y;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    x = <span class=\"string\">''</span>;</span><br><span class=\"line\">    y = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"comment\">//  正常</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x.length);</span><br><span class=\"line\">    <span class=\"comment\">//  Object的属性及方法没有length。报错</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(y.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Final-and-const\"><a href=\"#Final-and-const\" class=\"headerlink\" title=\"Final and const\"></a>Final and const</h5><p>如果你以后不打算修改一个变量，使用 <code>final</code> 或者<code>const</code>。</p>\n<p> 一个final 变量只能赋值一次；一个const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在第一次使用的时候初始化。</p>\n<p><code>const</code> 变量为编译时常量。 如果 const 变量在类中，请定义为 <code>static const</code>。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。<br><code>const</code> 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以省略<span class=\"keyword\">String这个类型声明</span></span><br><span class=\"line\"><span class=\"keyword\">final </span><span class=\"keyword\">str </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">//final <span class=\"keyword\">String </span><span class=\"keyword\">str </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">; </span></span><br><span class=\"line\"><span class=\"symbol\">const</span> <span class=\"keyword\">str1 </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">//const <span class=\"keyword\">String </span><span class=\"keyword\">str1 </span>= <span class=\"string\">\"hi world\"</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"Built-in-types-内置的类型\"><a href=\"#Built-in-types-内置的类型\" class=\"headerlink\" title=\"Built-in types(内置的类型)\"></a>Built-in types(内置的类型)</h5><p>Dart内置支持以下类型：</p>\n<ul>\n<li><code>numbers</code>：<code>int</code>与<code>double</code>;<br>-<code>strings</code>: UTF-16 编码的字符序列。 可以使用单引号或者双引号来创建字符串;</li>\n<li><code>booleans</code>:Dart 有一个名字为<code>bool</code> 的类型。 只有两个对象是布尔类型的：<code>true</code>和<code>false</code> 所创建的对象， 这两个对象也都是编译时常量。</li>\n<li><code>lists</code> (也被称之为 arrays或有序集合)</li>\n<li><code>maps</code>：Map是一个键值对相关的对象。键和值可以是任何类型的对象，每个<strong>键</strong>只出现一个。</li>\n<li><code>runes</code> (用于在字符串中表示 Unicode 字符)：在 Dart 中，runes 代表字符串的 UTF-32 code points。</li>\n<li><code>symbols</code>：一个 Symbol object 代表 Dart 程序中声明的操作符或者标识符。使用 Symbol 字面量来获取标识符的 symbol 对象，也就是在标识符 前面添加一个 # 符号;</li>\n</ul>\n<p>可以在字符串中使用表达式，用法是这样的： <code>${expression}</code>。如果表达式是一个比赛服，可以省略 {}。 如果表达式的结果为一个对象，则 Dart 会调用对象的 `toString() 函数来获取一个字符串。</p>\n<h5 id=\"Functions（方法）\"><a href=\"#Functions（方法）\" class=\"headerlink\" title=\"Functions（方法）\"></a>Functions（方法）</h5><p>Dart 是一个真正的面向对象语言，方法也是对象并且具有一种 类型，<code>Function</code>。 这意味着，方法可以赋值给变量，也可以当做其他方法的参数。 也可以把 Dart 类的实例当做方法来调用。 </p>\n<h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><p><strong>本文仅针对Mac</strong><br>其它平台参见：<br><a href=\"https://flutterchina.club/setup-windows/\" target=\"_blank\" rel=\"noopener\">在Windows上搭建Flutter开发环境</a>与<a href=\"https://flutterchina.club/setup-linux/\" target=\"_blank\" rel=\"noopener\">在Linux上搭建Flutter开发环境</a></p>\n<h3 id=\"安装前的准备\"><a href=\"#安装前的准备\" class=\"headerlink\" title=\"安装前的准备\"></a>安装前的准备</h3><p>由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装Flutter及Dart\"><a href=\"#安装Flutter及Dart\" class=\"headerlink\" title=\"安装Flutter及Dart\"></a>安装Flutter及Dart</h3><p>Dart SDK已经在捆绑在Flutter里了，没有必要单独安装Dart。</p>\n<h4 id=\"SDK下载及环境变量设置\"><a href=\"#SDK下载及环境变量设置\" class=\"headerlink\" title=\"SDK下载及环境变量设置\"></a>SDK下载及环境变量设置</h4><ol>\n<li>从<a href=\"https://flutter.dev/docs/development/tools/sdk/releases#macos\" target=\"_blank\" rel=\"noopener\">官网下载页</a>或<a href=\"https://github.com/flutter/flutter/releases\" target=\"_blank\" rel=\"noopener\">官方Github</a>中下载或克隆相应平台的安装包。(个人不推荐使用git clone,也许是地区原因，作者这边clone时极慢极慢。。)</li>\n<li>解压安装包至你想要的地方，如：<code>/User/userName/Flutter</code></li>\n<li>在环境变量中增加<code>export PATH=</code>pwd<code>/flutter/bin:$PATH</code>。</li>\n<li>执行<code>echo $PATH</code>检查Flutter是否已加入到PATH中。</li>\n</ol>\n<h4 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h4><p>在命令行下，运行<code>flutter doctor</code>或<code>flutter doctor -v</code>检查环境并在终端窗口中显示报告。仔细查看检查结果，问题项会用<code>✗</code>标出。该命令检查并指出未安装/缺失/存在问题的组件/依赖等，根据命令指示进行安装。安装完成后再次执行进行检查。直到提示<code>No issues found!</code>。<br>另外，在<code>flutter doctor</code>运行时，会下载它自己的依赖项并自行编译。所以，请<strong>耐心等待</strong>。</p>\n<h3 id=\"平台设置\"><a href=\"#平台设置\" class=\"headerlink\" title=\"平台设置\"></a>平台设置</h3><p>macOS支持为iOS和Android开发Flutter应用程序。所以，需要安装相应的IDE及SDK。</p>\n<h4 id=\"iOS-平台\"><a href=\"#iOS-平台\" class=\"headerlink\" title=\"iOS 平台\"></a>iOS 平台</h4><ol>\n<li>在苹果商店中安装Xcode并至少打开一次。(确保Xcode许可协议同意过)</li>\n<li>命令行执行<code>open -a Simulator</code>启动iOS模拟器。</li>\n<li><p>执行以下命令来安装用于Flutter安装到iOS设备的工具：</p>\n <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span>  安装Homebrew,已安装的可省略</span><br><span class=\"line\"><span class=\"string\">/usr/bin/ruby</span> -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></span><br><span class=\"line\"><span class=\"string\">//</span>  开始安装相应工具</span><br><span class=\"line\">brew update</span><br><span class=\"line\">brew install <span class=\"params\">--HEAD</span> libimobiledevice</span><br><span class=\"line\">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class=\"line\">pod setup   <span class=\"string\">//</span>  执行时间超长<span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Android-平台\"><a href=\"#Android-平台\" class=\"headerlink\" title=\"Android 平台\"></a>Android 平台</h4><p>Android Studio下载需梯子，可查找国内源进行下载并进行SDK更新等。<br>Android Studio是谷歌官推的，安装flutter插件后，开发起来相对于其他IDE来说，方便很多，自带了三种模板：</p>\n<ul>\n<li>Flutter Application： Flutter应用</li>\n<li>Flutter Plugin：Flutter插件</li>\n<li>Flutter Package：纯Dart组件</li>\n</ul>\n<p>安装步骤：</p>\n<ol>\n<li>安装<a href=\"https://www.java.com/zh_CN/download/mac_download.jsp\" target=\"_blank\" rel=\"noopener\">Java</a>。</li>\n<li>准备好梯子…</li>\n<li>安装<a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"noopener\">Android Studio</a>或<a href=\"https://www.jetbrains.com/idea/?fromMenu\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA</a>。</li>\n<li>安装最新的Android SDK、Android SDK平台工具和Android SDK构建工具。</li>\n<li>为Java和Android配置环境变量</li>\n</ol>\n<h4 id=\"安装Flutter与Dart插件\"><a href=\"#安装Flutter与Dart插件\" class=\"headerlink\" title=\"安装Flutter与Dart插件\"></a>安装Flutter与Dart插件</h4><h5 id=\"Android-Studio和IntelliJ-IDea\"><a href=\"#Android-Studio和IntelliJ-IDea\" class=\"headerlink\" title=\"Android Studio和IntelliJ IDea\"></a>Android Studio和IntelliJ IDea</h5><p>在Android Studio和IntelliJ IDea中，Flutter用到两个插件：</p>\n<ul>\n<li><code>Flutter插件</code>: 支持Flutter开发（运行、测试、热重载等）。</li>\n<li><code>Dart插件</code>: 提供代码支持（代码输入时验证、补全等）。<br>安装步骤：</li>\n<li>打开IDE并打开插件首选项(Preferences &gt; Plugins)</li>\n<li>选择Browse repositories…，搜索flutter插件并进行安装。安装后会提示安装Dart插件。<h5 id=\"Visual-Studio\"><a href=\"#Visual-Studio\" class=\"headerlink\" title=\"Visual Studio\"></a>Visual Studio</h5>在插件中查找并安装<code>Flutter</code>、<code>Dart</code>和<code>Awesome Flutter Snippets</code>。</li>\n</ul>\n<h3 id=\"升级Flutter-SDK及依赖包\"><a href=\"#升级Flutter-SDK及依赖包\" class=\"headerlink\" title=\"升级Flutter SDK及依赖包\"></a>升级Flutter SDK及依赖包</h3><ul>\n<li><code>flutter upgrade</code>：升级SDK及flutter项目的依赖包。</li>\n<li><code>flutter packages get</code>: 获取项目所有的依赖包。</li>\n<li><code>flutter packages upgrade</code>: 获取项目所有依赖包的最新版本。</li>\n</ul>\n<h3 id=\"收尾工作\"><a href=\"#收尾工作\" class=\"headerlink\" title=\"收尾工作\"></a>收尾工作</h3><p>再次运行<code>flutter doctor</code>检查环境并在终端窗口中显示报告。直到提示<code>No issues found!</code>。</p>\n","categories":[{"name":"Flutter","slug":"Flutter","count":2,"path":"api/categories/Flutter.json"}],"tags":[{"name":"Flutter","slug":"Flutter","count":2,"path":"api/tags/Flutter.json"}]}